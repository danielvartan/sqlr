devtools::load_all(".")
devtools::load_all(".")
pubmed(keyword = "sleep")
length(pubmed(keyword = "sleep"))
devtools::load_all(".")
pubmed(keyword = "sleep")
pubmed()
devtools::load_all(".")
pubmed(keyword = "sleep")
devtools::load_all(".")
pubmed(keyword = "sleep")
pubmed(keyword = "sleep", "biologica clock")
devtools::load_all(".")
pubmed(keyword = "sleep", "biologica clock")
pubmed(keyword = "sleep", "biological clock")
pubmed(keyword = "sleep", "biological clock", "abstract")
pubmed(keyword = "sleep", "biological clock", constraint = "abstract")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::install()
install.packages(c("magick", "ragg", "RCurl", "renv", "textshaping", "utf8", "xfun"))
devtools::load_all(".")
devtools::install()
library::available("sqlr")
available::available("sqlr")
usethis::use_lifecycle_badge("experimental")
usethis::use_github_actions_badge()
usethis::use_travis()
usethis::use_coverage("codecov")
usethis::use_coverage("codecov")
usethis::use_coverage("codecov")
usethis::use_logo("./.archive/ai/hex-logo.png")
usethis::use_github_pages()
usethis::use_github_pages()
codemetar::write_codemeta()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_mit_license()
usethis::use_logo("./.archive/ai/hex-logo.png")
?raw_data
usethis::use_test("raw_data")
devtools::load_all(".")
raw_data()
raw_data(raw_data()[1]
raw_data(raw_data()[1])
checkmate::expect_string(raw_data()[1])
checkmate::expect_string(raw_data(raw_data()[1]), len = 1,
any.missing = FALSE, all.missing = FALSE)
args(checkmate::expect_string)
checkmate::expect_string(raw_data(raw_data()[1]), na.ok = FALSE)
raW_data(file = 1)
raw_data()
raw_data(file = 1)
expect_error(raW_data(file = 1))
test_that("raw_data() | general test", {
checkmate::expect_character(raw_data(), any.missing = FALSE,
all.missing = FALSE)
checkmate::expect_string(raw_data(raw_data()[1]), na.ok = FALSE)
})
test_that("raw_data() | error test", {
# Invalid value for `file`
expect_error(raW_data(file = 1))
})
test_that("double_quote_() | general test", {
test <- list("test", 1)
for (i in test) {
checkmate::expect_character(double_quote_(i))
expect_equal(double_quote_(i), paste0("\"", i, "\""))
}
})
test_that("single_quote_() | general test", {
test <- list("test", 1)
for (i in test) {
checkmate::expect_character(single_quote_(i))
expect_equal(single_quote_(i), paste0("'", i, "'"))
}
})
test_that("double_quote_() | general test", {
test <- list("test", 1)
for (i in test) {
checkmate::expect_character(double_quote_(i))
expect_equal(double_quote_(i), paste0("\"", i, "\""))
}
})
test_that("backtick_() | general test", {
test <- list("test", 1)
for (i in test) {
checkmate::expect_character(backtick_(i))
expect_equal(backtick_(i), paste0("`", i, "`"))
}
})
test_that("is_whole_number() | general test", {
expect_false(is_whole_number(letters))
expect_false(is_whole_number(datasets::iris))
expect_false(is_whole_number(-1L))
expect_false(is_whole_number(-55))
expect_false(is_whole_number(1.58))
expect_true(is_whole_number(0))
expect_true(is_whole_number(as.integer(1)))
expect_true(is_whole_number(as.double(11)))
expect_true(is_whole_number(as.numeric(475)))
})
devtools::load_all(".")
test_that("is_whole_number() | general test", {
expect_false(is_whole_number(letters))
expect_false(is_whole_number(datasets::iris))
expect_false(is_whole_number(-1L))
expect_false(is_whole_number(-55))
expect_false(is_whole_number(1.58))
expect_true(is_whole_number(0))
expect_true(is_whole_number(as.integer(1)))
expect_true(is_whole_number(as.double(11)))
expect_true(is_whole_number(as.numeric(475)))
})
devtools::load_all(".")
test_that("is_whole_number() | general test", {
expect_false(is_whole_number(letters))
expect_false(is_whole_number(datasets::iris))
expect_false(is_whole_number(-1L))
expect_false(is_whole_number(-55))
expect_false(is_whole_number(1.58))
expect_true(is_whole_number(0))
expect_true(is_whole_number(as.integer(1)))
expect_true(is_whole_number(as.double(11)))
expect_true(is_whole_number(as.numeric(475)))
})
test_that("class_collapse() | general test", {
test <- list("test", 1)
for (i in test) {
checkmate::expect_character(class_collapse(i))
expect_equal(class_collapse(i),
single_quote_(paste0(class(i), collapse = "/")))
}
})
test_that("paste_collapse() | general test", {
x <- "test"
expect_equal(paste_collapse(x), x)
x <- c(1, 2, 3)
sep <- ", "
last <- ", and "
object <- paste_collapse(x, sep = sep, last = last)
expect_equal(object, "1, 2, and 3")
# Error test
expect_error(paste_collapse("", 1, ""))
expect_error(paste_collapse("", "", 1))
})
test_that("inline_collapse() | general test", {
x <- "test"
single_quote <- FALSE
serial_comma <- FALSE
object <- inline_collapse(x, single_quote = single_quote,
serial_comma = serial_comma)
expect_equal(object, x)
x <- "test"
single_quote <- TRUE
serial_comma <- FALSE
object <- inline_collapse(x, single_quote = single_quote,
serial_comma = serial_comma)
expect_equal(object, paste0("'", x, "'"))
x <- c(1, 2)
single_quote <- FALSE
serial_comma <- FALSE
object <- inline_collapse(x, single_quote = single_quote,
serial_comma = serial_comma)
expect_equal(object, paste0(1, " and ", 2))
x <- c(1, 2)
single_quote <- TRUE
serial_comma <- FALSE
object <- inline_collapse(x, single_quote = single_quote,
serial_comma = serial_comma)
expect_equal(object, paste0("'1'", " and ", "'2'"))
x <- c(1, 2, 3)
single_quote <- TRUE
serial_comma <- TRUE
object <- inline_collapse(x, single_quote = single_quote,
serial_comma = serial_comma)
expect_equal(object, paste0("'1'", ", ", "'2'", ", and ", "'3'"))
# Error test
expect_error(inline_collapse("", "", TRUE))
expect_error(inline_collapse("", TRUE, ""))
})
test_that("shush() | general test", {
x <- "test"
quiet <- FALSE
expect_equal(shush(x, quiet = quiet), x)
test <- function() {
warning("test", call. = FALSE)
"test"
}
quiet <- TRUE
expect_equal(shush(test(), quiet = quiet), "test")
quiet <- FALSE
expect_warning(shush(test(), quiet = quiet))
# Error test
expect_error(inline_collapse("", "", TRUE))
expect_error(inline_collapse("", TRUE, ""))
})
test_that("close_round() | general test", {
x <- 1.999999
digits <- 5
expect_equal(close_round(x, digits = digits), 2)
x <- 1.000001
digits <- 5
expect_equal(close_round(x, digits = digits), 1)
x <- 1.001
digits <- 2
expect_equal(close_round(x, digits = digits), 1)
x <- c(1.000001, 1.999999)
digits <- 5
expect_equal(close_round(x, digits = digits), c(1, 2))
# Error test
expect_error(close_round("", 1))
expect_error(close_round(1, ""))
})
test_that("swap() | general test", {
x <- 1
y <- 2
expect_equal(swap(x, y), list(x = y, y = x))
x <- 1
y <- TRUE
expect_equal(swap(x, y), list(x = TRUE, y = 1))
x <- c(1, 1)
y <- ""
expect_equal(swap(x, y), list(x = "", y = c(1, 1)))
})
test_that("swap_if() | general test", {
x <- 2
y <- 1
condition <- "x > y"
expect_equal(swap_if(x, y, condition = condition), list(x = y, y = x))
x <- 1
y <- 1
condition <- "x > y"
expect_equal(swap_if(x, y, condition = condition), list(x = x, y = y))
# Error test
expect_error(swap_if(1, 1, ""))
})
test_that("count_na() | general test", {
x <- c(1, NA, 1, NA)
expect_equal(count_na(x), 2)
})
test_that("escape_regex() | general test", {
x <- "test.test"
expect_equal(escape_regex(x), "test\\.test")
})
test_that("get_names() | general test", {
object <- get_names(x, y, z)
expect_equal(object, noquote(c("x", "y", "z")))
})
test_that("get_class() | general test", {
foo <- function(x) {
class(x)[1]
}
expect_equal(get_class(1), "numeric")
x <- datasets::iris
expect_equal(get_class(x), vapply(x, foo, character(1)))
x <- list(a = 1, b = 1)
expect_equal(get_class(x), vapply(x, foo, character(1)))
})
test_that("fix_character() | general test", {
x <- c("1   ", "   1", "", "NA")
expect_equal(fix_character(x), c("1", "1", NA, NA))
# Error test
expect_error(fix_character(1))
})
test_that("str_extract_() | general test", {
string <- "test123"
pattern <- "\\d+$"
perl <- TRUE
object <- str_extract_(string, pattern, perl = perl)
expected <- regmatches(string, regexpr(pattern, string, perl = TRUE))
expect_equal(object, expected)
string <- "test123"
pattern <- "^0$"
perl <- TRUE
object <- str_extract_(string, pattern, perl = perl)
expected <- as.character(NA)
expect_equal(object, expected)
# Error test
expect_error(str_extract_(1, 1, TRUE, TRUE, TRUE, TRUE, TRUE))
expect_error(str_extract_(1, TRUE, "", TRUE, TRUE, TRUE, TRUE))
expect_error(str_extract_(1, TRUE, TRUE, "", TRUE, TRUE, TRUE))
expect_error(str_extract_(1, TRUE, TRUE, TRUE, "", TRUE, TRUE))
expect_error(str_extract_(1, TRUE, TRUE, TRUE, TRUE, "", TRUE))
expect_error(str_extract_(1, TRUE, TRUE, TRUE, TRUE, TRUE, ""))
})
test_that("str_subset_() | general test", {
string <- month.name
pattern <- "^J.+"
perl <- TRUE
negate <- FALSE
object <- str_subset_(string, pattern, perl = perl, negate = negate)
expected <- subset(string, grepl(pattern, string, perl = perl))
expect_equal(object, expected)
string <- month.name
pattern <- "^J.+"
perl <- TRUE
negate <- TRUE
object <- str_subset_(string, pattern, perl = perl, negate = negate)
expected <- subset(string, !grepl(pattern, string, perl = perl))
expect_equal(object, expected)
string <- month.name
pattern <- "^z$"
perl <- TRUE
negate <- FALSE
object <- str_subset_(string, pattern, perl = perl, negate = negate)
expected <- as.character(NA)
expect_equal(object, expected)
# Error test
expect_error(str_subset_(1, 1, TRUE, TRUE, TRUE, TRUE, TRUE))
expect_error(str_subset_(1, TRUE, "", TRUE, TRUE, TRUE, TRUE))
expect_error(str_subset_(1, TRUE, TRUE, "", TRUE, TRUE, TRUE))
expect_error(str_subset_(1, TRUE, TRUE, TRUE, "", TRUE, TRUE))
expect_error(str_subset_(1, TRUE, TRUE, TRUE, TRUE, "", TRUE))
expect_error(str_subset_(1, TRUE, TRUE, TRUE, TRUE, TRUE, ""))
})
test_that("check_any_na() and assert_any_na() | general test", {
checkmate::expect_string(check_any_na(c(NA, 1)))
expect_true(check_any_na(c(1, 1)))
expect_equal(assert_any_na(c(1, 1)), c(1, 1))
expect_error(assert_any_na(c(NA, 1)))
})
test_that("check_not_all_na() and assert_not_all_na() | general test", {
checkmate::expect_string(check_not_all_na(c(NA, NA)))
expect_true(check_not_all_na(c(1, 1)))
expect_equal(assert_not_all_na(c(1, 1)), c(1, 1))
expect_error(assert_not_all_na(c(NA, NA)))
})
test_that("check_length_one() and assert_length_one() | general test", {
checkmate::expect_string(check_length_one(c(1, 1)))
checkmate::expect_string(check_length_one(c(1, NA), any.missing = FALSE))
expect_true(check_length_one(1))
expect_equal(assert_length_one(1), 1)
expect_error(assert_length_one(c(1, 1)))
})
test_that("check_has_length() and assert_has_length() | general test", {
checkmate::expect_string(check_has_length(numeric()))
checkmate::expect_string(check_has_length(c(1, NA), any.missing = FALSE))
expect_true(check_has_length(1))
expect_equal(assert_has_length(1), 1)
expect_error(assert_has_length(numeric()))
})
test_that("check_whole_number() and assert_whole_number() | general test", {
checkmate::expect_string(check_whole_number(c(1, 1.5)))
checkmate::expect_string(check_whole_number(c(1, NA), any.missing = FALSE))
checkmate::expect_string(check_whole_number(NULL, null.ok = FALSE))
expect_true(check_whole_number(c(1, 1)))
expect_true(check_whole_number(NULL, null.ok = TRUE))
expect_equal(assert_whole_number(c(1, 1)), c(1, 1))
expect_error(assert_whole_number(c(1, 1.5)))
})
as.POSIXct("1970-01-01 00:00:00")
check_posixt(c(1, 1))
check_posixt(c(1, NA), any.missing = FALSE)
checkmate::expect_string(check_posixt(c(1, 1)))
devtools::load_all(".")
checkmate::expect_string(check_posixt(c(1, 1)))
check_posixt(c(1, 1))
test_that("check_posixt() and assert_posixt() | general test", {
object <- c(as.POSIXct("1970-01-01 00:00:00"),
as.POSIXct("2021-01-01 00:00:00"))
checkmate::expect_string(check_posixt(c(1, 1)))
checkmate::expect_string(check_posixt(c(1, NA), any.missing = FALSE))
checkmate::expect_string(check_posixt(NULL, null.ok = FALSE))
expect_true(check_posixt(object))
expect_true(check_posixt(NULL, null.ok = TRUE))
expect_equal(assert_posixt(object), object)
expect_error(assert_posixt(c(1, 1)))
})
test_that("assert_identical() | general test", {
expect_error(assert_identical(1))
expect_error(assert_identical(1, type = "a"))
expect_error(assert_identical(1, c(1, 1), type = "value"))
expect_true(assert_identical(1, 1, type = "value"))
expect_error(assert_identical(1, c(2, 2), type = "length"))
expect_true(assert_identical(1, 2, type = "length"))
expect_error(assert_identical(1, "a", type = "class"))
expect_true(assert_identical(1, 3, type = "class"))
expect_true(assert_identical(NULL, NULL, null.ok = TRUE))
expect_error(assert_identical(1, NA, any.missing = FALSE))
expect_error(assert_identical(NULL, NULL, null.ok = FALSE))
})
usethis::use_code_of_conduct()
usethis::use_news_md()
spelling::spell_check_package()
spelling::update_wordlist()
spelling::spell_check_package()
devtools::load_all(".")
citation("sqlr")
devtools::install()
list.files()
?list.files
dir("./inst/extdata/citations/")
dir("./inst/extdata/citations")
dir("./inst/extdata/citation")
stringr::str_replace_all(dir("./inst/extdata/citation"), " - ", "_"
)
stringr::str_replace_all(dir("./inst/extdata/citation"), " - ", "_")
" - ", "_"
new_name <- tolower(dir("./inst/extdata/citation"))
new_name <- stringr::str_replace_all(new_name, " - ", "_")
new_name
stringr::str_replace_all(new_name, " ", "-")
new_name <- tolower(dir("./inst/extdata/citation"))
new_name <- stringr::str_replace_all(new_name, " - ", "_")
new_name <- stringr::str_replace_all(new_name, " ", "-")
file.rename(dir("./inst/extdata/citation"), new_name)
?file.rename
warnings()
path <- "./inst/extdata/citation/"
paste0(path, new_name)
dir(path)
path <- "./inst/extdata/citation/"
new_name <- tolower(dir("./inst/extdata/citation"))
new_name <- stringr::str_replace_all(new_name, " - ", "_")
new_name <- stringr::str_replace_all(new_name, " ", "-")
file.rename(paste0(path, dir(path)), paste0(path, new_name))
# Normalize filenames
path <- "./inst/extdata/citation/"
new_name <- tolower(dir(path))
new_name <- stringr::str_replace_all(new_name, " - ", "_")
new_name <- stringr::str_replace_all(new_name, " ", "-")
file.rename(paste0(path, dir(path)), paste0(path, new_name))
use_r("domain")
library(usethis)
use_r("domain")
use_r("keyword")
use_r("search")
use_r("source")
devtools::load_all(".")
keyword_set(1, "english")
pubmed("Lorem", "Ipsum, dolor", ""sit amet", constriant = "abstract")
pubmed("Lorem", "Ipsum, dolor", ""sit amet", constraint = "abstract")
pubmed("Lorem", "Ipsum, dolor", "sit amet", constraint = "abstract")
path <- "./inst/extdata/search_history/"
new_name <- tolower(dir(path))
new_name <- stringr::str_replace_all(new_name, " - ", "_")
new_name <- stringr::str_replace_all(new_name, " ", "-")
file.rename(paste0(path, dir(path)), paste0(path, new_name))
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
keyword_set(1, "english")
devtools::document()
pkgdown::build_site(preview = TRUE)
pkgdown::build_site(preview = FALSE)
spelling::spell_check_package()
spelling::update_wordlist()
devtools::install()
devtools::load_all(".")
devtools::load_all(".")
keyword_set(1, "english)
)
keyword_set(1, "english")
devtools::load_all(".")
keyword_set(1, "english")
devtools::load_all(".")
devtools::load_all(".")
keyword_set(1, "english")
devtools::load_all(".")
keyword_set(1, "english")
pkgdown::build_site(preview = FALSE)
pubmed("tes1", "test2, test")
pubmed("tes1", "test2, test*")
pubmed("tes1", "test2, test test")
usethis::use_logo
?write.table
test <- data.frame(a = 1, b = 1)
write.table(test, "clipboard")
write.table(pubmed("tes1", "test2, test test"), "clipboard")
devtools::load_all(".")
devtools::load_all(".")
pubmed("tes1", "test2, test test")
devtools::load_all(".")
pubmed("tes1", "test2, test test")
pubmed("tes1", "test2, test test", print = TRUE)
devtools::load_all(".")
pubmed("tes1", "test2, test test", print = TRUE)
devtools::load_all(".")
pubmed("tes1", "test2, test test", print = TRUE)
write.table(pubmed("tes1", "test2, test test"), paste0("clipboard", row.names = FALSE)
)
write.table(pubmed("tes1", "test2, test test"), paste0("clipboard-", row.names = FALSE))
writeClipboard(pubmed("tes1", "test2, test test"))
devtools::load_all(".")
pubmed("tes1", "test2, test test")
pubmed("tes1", "test2, test test", print - FALSE)
pubmed("tes1", "test2, test test", print = FALSE)
devtools::load_all(".")
devtools::load_all(".")
pubmed("tes1", "test2, test test", print = FALSE)
pubmed("tes1", "test2, test test")
devtools::load_all(".")
devtools::load_all(".")
pubmed("tes1", "test2, test test")
devtools::load_all(".")
pubmed("tes1", "test2, test test")
pubmed("tes1", "test2, test test")
pubmed("tes1", "test2, test test")
pubmed("tes1", "test2, test test")
devtools::load_all(".")
pubmed("tes1", "test2, test test")
devtools::load_all(".")
use_r("pubmed")
utils::writeClipboard
pubmed("test1", "test2")
devtools::load_all(".")
dialog_line("test")
devtools::load_all(".")
dialog_line("test")
alert("1")
