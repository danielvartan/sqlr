utils::data("test", package = package, envir = environment())
utils::data("test", package = "sqlr", envir = environment())
?data
utils::data(package = "sqlr", envir = environment())
utils::data(package = "sqlr")
utils::data("domain". package = "sqlr")
utils::data("domain", package = "sqlr")
rstudioapi::getActiveProject()
rstudioapi::getActiveProject()
grepl("[a-zA-Z0-9.]$", rstudioapi::getActiveProject())
stringr::str_extract("[a-zA-Z0-9.]$", rstudioapi::getActiveProject())
stringr::str_extract(rstudioapi::getActiveProject(), "[a-zA-Z0-9.]$")
stringr::str_extract(rstudioapi::getActiveProject(), "[a-zA-Z0-9.]*$")
devtools::load_all(".")
read_sheet("domain")
View(read_sheet("domain"))
devtools::load_all(".")
sheet_id()
sheet_id("source")
write_sheet()
devtools::load_all(".")
write_sheet()
devtools::load_all(".")
write_sheet()
dialog_line("dsadsada", "dsads"adsa)
dialog_line("dsadsada", "dsads")
dialog <- dialog_line(
"WARNING: You need to configure the 'sheets' file before using",
"'write_sheet()'. Press 'esc' to exit or 'enter' to continue >",
space_above = FALSE, space_below = FALSE)
devtools::load_all(".")
write_shh
write_sheet()
devtools::load_all(".")
query(keyword_set(keyword, 1, "english"), "AND", keyword_set(keyword, 2, "english"), provider = "lilacs", constraint = c("title", "abstract"))
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs", constraint = c("title", "abstract"))
keyword_set(1, "english")
keyword_set(2, "english")
devtools::load_all(".")
keyword_set(2, "english")
devtools::load_all(".")
keyword_set(2, "english")
devtools::load_all(".")
keyword_set(2, "english")
keyword_set(1, "english")
devtools::load_all(".")
keyword_set(1, "english")
devtools::load_all(".")
keyword_set(1, "english")
keyword_set(2, "english")
duplicated(keyword_set(2, "english"))
duplicated(c(1, 1, 2))
devtools::load_all(".")
tidy_keyword(c(1, 1, 2))
tidy_keyword(c("1", "1", "2"))
length(keyword_set(1, "english"))
tidy_keyword(keyword_set(1, "english"))
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs", constraint = c("title", "abstract"))
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs", constraint = c("title", "abstract"))
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs", constraint = c("title", "abstract"))
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs", constraint = c("title", "abstract"))
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "pubmed", constraint = c("title", "abstract"))
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "pubmed", constraint = c("title", "abstract"))
keyword_set(1, "english")
tidy_keyword(keyword_set(1, "english"))
query(keyword_set(1, "english"), provider = "pubmed", constraint = c("title", "abstract"))
query(keyword_set(1, "english"), provider = "pubmed", constraint = c("abstract"))
debugonce(paste_tag)
query(keyword_set(1, "english"), provider = "pubmed", constraint = c("abstract"))
x
x
devtools::load_all(".")
query(keyword_set(1, "english"), provider = "pubmed", constraint = c("abstract"))
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "pubmed", constraint = c("title", "abstract"))
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "pubmed", constraint = c("abstract"))
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "embase", constraint = c("abstract"))
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "embase", constraint = c("abstract"))
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "embase", constraint = c("title", "abstract"))
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "embase", constraint = c("title", "abstract"))
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "ebsco", constraint = c("title", "abstract"))
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "ebsco", constraint = c("title", "abstract"))
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs", constraint = c("title", "abstract"))
source('C:/Midia/GitHub/sqlr/data-raw/tags.R')
tags(TRUE)
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "scielo", constraint = c("title", "abstract"))
spelling::update_wordlist()
spelling::update_wordlist()
codemetar::write_codemeta()
install.packages("processx")
urlchecker::url_check()
devtools::install()
pkgdown::build_site(preview = TRUE)
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs", constraint = c("title", "abstract"))
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs", constraint = c("title", "abstract"))
?writeClipboard()
devtools::load_all(".")
?is.atomic
devtools::load_all(".")
cutter(seq(10), c(4, 8))
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs", constraint = c("title", "abstract"))
query("lorem", "ipsum", "AND", "dolor", "NOT", "met", provider = "lilacs", constraint = c("title", "abstract"))
query("lorem", "ipsum*", "AND", "dolor", "NOT", "met", provider = "lilacs", constraint = c("title", "abstract"))
query("lorem", "lorem", "AND", "dolor", "NOT", "met", provider = "lilacs", constraint = c("title", "abstract"))
query("lorem", "lorem", "AND", "dolor", "NOT", "met", provider = "lilacs", constraint = c("abstract"))
query("lorem", "lorem", "AND", "dolor", "NOT", "met", provider = "pubmed", constraint = c("abstract"))
query("lorem", "lorem", "AND", "dolor", "NOT", "met", provider = "embase", constraint = c("abstract"))
query("lorem", "lorem", "AND", "dolor", "NOT", "met", provider = "embase", constraint = c("abstract", "author"))
query("lorem", "lorem", "AND", "dolor", "NOT", "met", provider = "embase", constraint = c("abstract", "tile"))
query("lorem", "lorem", "AND", "dolor", "NOT", "met", provider = "embase", constraint = c("abstract", "title"))
query("lorem", "lorem", "AND", "dolor", "NOT", "met", provider = "ebsco", constraint = c("abstract", "title"))
query("lorem", "lorem", "AND", "dolor", "NOT", "met", provider = "ebsco", constraint = c("abstract"))
query("lorem", "lorem ipsum", "AND", "dolor", "NOT", "met", provider = "ebsco", constraint = c("abstract"))
cyclocomp::cyclocomp(chopper)
cyclocomp::cyclocomp(query)
cyclocomp::cyclocomp(get_tag)
cyclocomp::cyclocomp(paste_tag)
cyclocomp::cyclocomp(pubmed)
cyclocomp::cyclocomp(embase)
query("AND", "lorem ipsum", "AND", "dolor", "NOT", "met", provider = "ebsco", constraint = c("abstract"))
query("lorem", "NOT", "AND", "dolor", "NOT", "met", provider = "ebsco", constraint = c("abstract"))
devtools::load_all(".")
query("lorem", "NOT", "AND", "dolor", "NOT", "met", provider = "ebsco", constraint = c("abstract"))
debugonce(chopper)
query("lorem", "NOT", "AND", "dolor", "NOT", "met", provider = "ebsco", constraint = c("abstract"))
x
x
devtools::load_all(".")
query("lorem", "NOT", "AND", "dolor", "NOT", "met", provider = "ebsco", constraint = c("abstract"))
debugonce(chopper)
query("lorem", "NOT", "AND", "dolor", "NOT", "met", provider = "ebsco", constraint = c("abstract"))
index[1] == 1 || index[length(index)] == length(x)
Reduce("-", index) == -1)
Reduce("-", index) == -1
Reduce("-", index)
index - index
index - (index + 1)
?Reduce
for (i in seq_along(index)) {
test <- index[i] - index[i + 1]
}
test
devtools::load_all(".")
chopper("lorem", "ipsum", "NOT", "AND", "set", "dolor")
chopper("lorem", "ipsum", "NOT", "AND", "set", "dolor") == -1
any(chopper("lorem", "ipsum", "NOT", "AND", "set", "dolor"), na.rm = TRUE)
accumulate(c(1, 2, 3, 4))
?accumulate
?Reduce
Reduce("-", c(1, 2, 3, 4), accumulate = TRUE)
Reduce("-", c(1, 2, 3, 4), init = c(1, 2, 3, 4))
Reduce("-", as.list(c(1, 2, 3, 4)))
diff(c(1, 2, 3, 4))
?diff
diff(c(1, 2, 3, 5))
devtools::load_all(".")
query("lorem", "NOT", "AND", "dolor", "NOT", "met", provider = "ebsco", constraint = c("abstract"))
query("lorem", "NOT", "ipsum", "AND", "dolor", "NOT", "met", provider = "ebsco", constraint = c("abstract"))
query("lorem", "NOT", "ipsum", "AND", "dolor", "NOT", "met", "AND", provider = "ebsco", constraint = c("abstract"))
query("lorem", "NOT", "AND", "AND", "dolor", "NOT", "met", "AND", provider = "ebsco", constraint = c("abstract"))
query("lorem", "NOT", "AND", "AND", "dolor", "NOT", "met", "lorem", provider = "ebsco", constraint = c("abstract"))
devtools::load_all(".")
query("lorem", "NOT", "AND", "AND", "dolor", "NOT", "met", "lorem", provider = "ebsco", constraint = c("abstract"))
query("lorem", "NOT", "ipsum", "AND", "dolor", "NOT", "met", "lorem", provider = "ebsco", constraint = c("abstract"))
devtools::load_all(".")
query("lorem", "NOT", "ipsum", "AND", "dolor", "NOT", "met", "lorem", provider = "ebsco", constraint = c("abstract"))
debugonce(builder)
query("lorem", "NOT", "ipsum", "AND", "dolor", "NOT", "met", "lorem", provider = "ebsco", constraint = c("abstract"))
x
out
out
out
out
devtools::load_all(".")
query("lorem", "NOT", "ipsum", "AND", "dolor", "NOT", "met", "lorem", provider = "ebsco", constraint = c("abstract"))
query("lorem", "NOT", "ipsum", "AND", "dolor", "NOT", "met", "lorem", provider = "ebsco", constraint = c("abstract"), print = FALSE)
query("lorem", "NOT", "ipsum", "AND", "dolor", "NOT", "met", "lorem", provider = "ebsco", constraint = c("abstract"), print = FALSE, clipboard = FALSE)
query("lorem", "NOT", "ipsum", "AND", "dolor", "NOT", "met", "lorem", provider = "ebsco", constraint = c("abstract")
)
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs", constraint = c("title", "abstract"))
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs")
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs")
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs")
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs")
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs")
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "lilacs")
cyclocomp::cyclocomp(builder)
query("lorem*", "AND", keyword_set(2, "english"), provider = "lilacs")
query("lorem*", "AND", "dolor*", provider = "lilacs")
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"),
provider = "lilacs", constraint = c("title", "abstract"))
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"),
provider = "pubmed", constraint = c("title/abstract"))
query("Lorem", "Ipsum, dolor", "sit", provider = "PubMed",
constraint = "Abstract")
query("Lorem", "Ipsum, dolor", "sit", provider = "PubMed",
constraint = "Abstract", clipboard = FALSE)
query("Lorem", "AND", "Ipsum", "NOT", "dolor", provider = "lilacs",
constraint = c("title", "abstract), clipboard = FALSE)
query("Lorem", "AND", "Ipsum", "NOT", "dolor", provider = "lilacs",
constraint = c("title", "abstract"), clipboard = FALSE)
source('C:/Midia/GitHub/sqlr/data-raw/tags.R')
tags(TRUE)
devtools::load_all(".")
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "apa", constraint = c("title/abstract"))
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "apa", constraint = c("title", "abstract", "keyword"))
devtools::load_all(".")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "apa", constraint = c("title", "abstract", "keyword"))
tags
tags$apa
i <- "apa"
apa <- tags$apa
names(get(i)) <- tolower(names(get(i)))
names(get(i)) <- tolower(names(get(i)))
names(get(i))
tolower(names(get(i)))
devtools::load_all(".")
change_name(apa, toupper(names(apa)))
names(apa)
devtools::load_all(".")
change_name(apa, toupper(names(apa)))
devtools::load_all(".")
double_char("1", "{")
devtools::load_all(".")
double_char("1", "{")
devtools::load_all(".")
double_char("1", "{")
double_char("1", "{", "}")
double_char("1", "\"")
paste0("(", "test", ")")
devtools::load_all(".")
enclosure("test")
enclosure("test", "round bracket")
enclosure("test", "curly bracket")
enclosure("test", "square bracket")
enclosure("test", "single quote")
enclosure("test", "double quote")
devtools::load_all(".")
tidy_keyword(keyword_set(1, "english"), enclosure = "curly bracket")
tidy_keyword(keyword_set(1, "english"), enclosure = "square bracket")
devtools::load_all(".")
query(keyword_set(1, "english"),
provider = "pubmed", constraint = c("title/abstract"),
enclosure = "curly bracket")
devtools::load_all(".")
query(keyword_set(1, "english"),
provider = "pubmed", constraint = c("title/abstract"),
enclosure = "curly bracket")
source('C:/Midia/GitHub/sqlr/data-raw/tags.R')
tags(TRUE)
query(keyword_set(1, "english"), "AND", "keyword_set(2, "english")"
provider = "pubmed", constraint = c("title/abstract"),
enclosure = "curly bracket")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"),
provider = "pubmed", constraint = c("title/abstract"),
enclosure = "curly bracket")
devtools::load_all(".")
constraint <- c("title", "abstract", "keywords")
c("title", "titles") %in% constraint
devtools::load_all(".")
query(keyword_set(1, "english"),
provider = "scopus", constraint = c("title", "abstract"),
enclosure = "curly bracket")
tags$scopus
source('C:/Midia/GitHub/sqlr/data-raw/tags.R')
tags(TRUE)
scopus <- list(
"Abstract" = "ABS",
"Abstracts" = "ABS", # Helper
"All Fields" = "ALL",
"Doc Title" = "TITLE",
"Title" = "TITLE", # Helper
"Doc Title, Abstract" = "TTILE-ABS",
"Doc Title, Abstract, Keyword" = "TITLE-ABS-KEY",
"Doc Title, Abstract, Keyword, Author" = "TITLE-ABS-KEY-AUTH",
"Affiliation" = "AFFIL",
"Affiliation City" = "AFFILCITY",
"Affiliation Country" = "AFFILCOUNTRY",
"Affiliation ID" = "AF-ID",
"Affiliation Organization" = "AFFILORG",
"Author" = "AUTH",
"Author Collaboration" = "AUTHCOLLAB",
"Author First Initial" = "AUTHFIRST",
"Author ID" = "AU-ID",
"Author Last Name" = "AUTHLASTNAME",
"Author Name" = "AUTHOR-NAME",
"ORCID" = "ORCID",
"Sequence Bank" = "SEQBANK",
"Sequence Number" = "SEQNUMBER",
"CAS Registry Number" = "CASREGNUMBER",
"Chemical" = "CHEM",
"Chemical Name" = "CHEMNAME",
"Conference Information" = "CONF",
"Conference Location" = "CONFLOC",
"Conference Name" = "CONFNAME",
"Conference Sponsors" = "CONFSPONSORS",
"Open Access" = "OA",
"Database" = "INDEX",
"Doc Type" = "DOCTYPE",
"Digital Object Identifier" = "DOI",
"Document Identifier" = "EID",
"First Author Name" = "FIRSTAUTH",
"First page" = "PAGEFIRST",
"Language" = "LANGUAGE",
"Last page" = "PAGELAST",
"Load Date" = "LOAD-DATE",
"Pages" = "PAGES",
"Editor" = "EDITOR",
"Editor First Name" = "EDFIRST",
"Editor Last Name" = "EDLASTNAME",
"Funding Information" = "FUND-ALL",
"Funding Sponsor" = "FUND-SPONSOR",
"Grant Number" = "FUND-NO",
"Sponsor Acronym" = "FUND-ACR",
"Author Keywords" = "AUTHKEY",
"Index Terms" = "INDEXTERMS",
"Keywords" = "KEY",
"Keyword" = "KEY", # Helper
"Manufacturer" = "MANUFACTURER",
"Trade Name" = "TRADENAME",
"Article Numberr" = "ARTNUM",
"Book Publisher" = "BOOKPUB",
"CODEN" = "CODEN",
"Date of Publication" = "PUBDATETXT",
"EISSN" = "EISSN",
"Exact Source Title" = "EXACTSRCTITLE",
"ISBN" = "ISBN",
"ISSN" = "ISSN",
"ISSNP" = "ISSNP",
"PubMed Identifier" = "PMID",
"Serial Issue ID" = "ISSUE",
"Serial Volume" = "VOLUME",
"Source Identifier" = "SRCID",
"Source Title" = "SRCTITLE",
"Source Type" = "SRCTYPE",
"Year of Publication" = "PUBYEAR",
"Reference" = "REF",
"Reference Article Number" = "REFARTNUM",
"Reference Author" = "REFAUTH",
"Reference First Page" = "REFPAGEFIRST",
"Reference Page Numbers" = "REFPAGE",
"Reference Publication Year" = "REFPUBYEAR",
"Reference Source Title" = "REFSRCTITLE",
"Reference Title" = "REFTITLE",
"Reference Website" = "WEBSITE",
"Subject Areas" = "SUBJAREA"
)
i <- "scopus"
for (i in export) {
change_name(get(i), tolower(names(get(i))))
}
export <- i
for (i in export) {
change_name(get(i), tolower(names(get(i))))
}
scopus
change_name(get(i), tolower(names(get(i))))
for (i in export) {
change_name(get(i), tolower(names(get(i))))
}
scopus
source('C:/Midia/GitHub/sqlr/data-raw/tags.R')
tags(TRUE)
debugonce(tags)
tags(TRUE)
debugonce(tags)
debugonce(tags)
tags(TRUE)
export
apa
exports
xport
export
source('C:/Midia/GitHub/sqlr/data-raw/tags.R')
tags(TRUE)
query(keyword_set(1, "english"), provider = "scopus", constraint = c("title", "abstract"), enclosure = "curly bracket")
devtools::load_all(".")
query(keyword_set(1, "english"), provider = "scopus", constraint = c("title", "abstract"),
query(keyword_set(1, "english"), provider = "scopus", constraint = c("title", "abstract"), enclosure = "curly bracket")
source('C:/Midia/GitHub/sqlr/data-raw/tags.R')
tags(TRUE)
source('C:/Midia/GitHub/sqlr/data-raw/tags.R')
tags(TRUE)
rm(tags)
devtools::load_all(".")
query(keyword_set(1, "english"), provider = "scopus", constraint = c("title", "abstract"), enclosure = "curly bracket")
query(keyword_set(1, "english"), provider = "scopus", constraint = c("title", "abstract", "keywords"), enclosure = "curly bracket")
query(keyword_set(1, "english"), provider = "scopus", constraint = c("title", "abstract", "keywords", "author"), enclosure = "curly bracket")
query(keyword_set(1, "english"), provider = "scopus", constraint = c("title", "keywords"), enclosure = "curly bracket")
query(keyword_set(1, "english"), , "AND", keyword_set(2, "english"), provider = "scopus", constraint = c("title", "abstract", "keywords"), enclosure = "curly bracket")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "scopus", constraint = c("title", "abstract", "keywords"), enclosure = "curly bracket")
query(keyword_set(1, "english"), , "AND NOT", keyword_set(2, "english"), provider = "scopus", constraint = c("title", "abstract", "keywords"), enclosure = "curly bracket")
devtools::load_all(".")
query(keyword_set(1, "english"), , "AND NOT", keyword_set(2, "english"), provider = "scopus", constraint = c("title", "abstract", "keywords"), enclosure = "curly bracket")
query(keyword_set(1, "english"), , "AND", keyword_set(2, "english"), provider = "scopus", constraint = c("title", "abstract", "keywords"), enclosure = "curly bracket")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "scopus", constraint = c("title", "abstract", "keywords"), enclosure = "curly bracket")
query(keyword_set(1, "english"), "AND NOT", keyword_set(2, "english"), provider = "scopus", constraint = c("title", "abstract", "keywords"), enclosure = "curly bracket")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "scopus", constraint = c("title", "abstract", "keywords"), enclosure = "curly bracket")
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "scopus", constraint = c("title", "abstract", "keywords"))
query("test", "pubmed")
query("test", provider = "pubmed")
query("test", "test2" provider = "pubmed")
query("test", "test2", provider = "pubmed")
query("test", "AND", "test2", provider = "pubmed")
query("test", "test", "AND", "test2", provider = "pubmed")
query("test", "test1", "AND", "test2", provider = "pubmed")
query("test", "test1", "AND", "test2", provider = "scopus")
devtools::load_all(".")
query("test", "test1", "AND", "test2", provider = "scopus")
devtools::load_all(".")
query("test", "test1", "AND", "test2", provider = "scopus")
devtools::load_all(".")
devtools::load_all(".")
query("test", "test1", "AND", "test2", provider = "scopus")
query("test", "test1 r", "AND", "test2", provider = "scopus")
query("test", "test1 r", "AND", "test2", provider = "apa")
query("test", "test1 r", "AND", "test2", provider = "apa", constraint = "title")
query("test", "test1 r", "AND", "test2", provider = "apa", constraint = c("title", "abstract"))
query("test", "test1 r, test4", "AND", "test2", provider = "apa", constraint = c("title", "abstract"))
devtools::load_all(".")
tidy_keyword("test")
tidy_keyword("test$")
tidy_keyword("test$a")
tidy_keyword("test? ")
devtools::load_all(".")
query("test", "test1 r, test4", "AND", "test2", provider = "apa", constraint = c("title", "abstract"))
query("test", "test1 r, test4", "AND", "test2$", provider = "apa", constraint = c("title", "abstract"))
tidy_keyword("test2$")
devtools::load_all(".")
query("test", "test1 r, test4", "AND", "test2$", provider = "apa", constraint = c("title", "abstract"))
query("test", "test1 r, test4", "AND", "test2", provider = "apa", constraint = c("title", "abstract"))
debugonce(builder)
query("test", "test1 r, test4", "AND", "test2", provider = "apa", constraint = c("title", "abstract"))
x
debugonce(builder)
query("test", "test1 r, test4", "AND", "test2$", provider = "apa", constraint = c("title", "abstract"))
x
x
x[[i]]
x
set
set
set
paste0("AND ", c("test1", "test2"))
stop(1,1)
devtools::load_all(".")
query("test", "test1 r, test4", "AND", "test2$", provider = "apa", constraint = c("title", "abstract"))
devtools::load_all(".")
query("test", "test1 r, test4", "AND", "test2$", provider = "apa", constraint = c("title", "abstract"))
query("test", "test1 r, test4", "AND", "test2$", "test", provider = "apa", constraint = c("title", "abstract"))
query("test", "test1 r, test4", "AND", "test2$", "test", provider = "pubmed", constraint = c("title", "abstract"))
devtools::load_all(".")
query("test", "test1 r, test4", "AND", "test2$", "test", provider = "pubmed", constraint = c("title", "abstract"))
devtools::load_all(".")
query("test", "test1 r, test4", "AND", "test2$", "test", provider = "pubmed", constraint = c("title", "abstract"))
query("test", "test1 r, test4", "AND", "test2$", "test", provider = "lilacs", constraint = c("title", "abstract"))
source('C:/Midia/GitHub/sqlr/data-raw/tags.R')
tags(TRUE)
devtools::load_all(".")
devtools::load_all(".")
query("test", "test1 r, test4", "AND", "test2$", "test", provider = "pubmed", constraint = c("title", "abstract"))
query("test", "test1 r, test4", "AND", "test2$", "test", provider = "pubmed", constraint = c("title", "abstract", "keywords"))
query("test", "test1 r, test4", "AND", "test2$", provider = "pubmed", constraint = c("title", "abstract", "keywords"))
query("test", "test1 r, test4", "AND", "test2$", "test", provider = "emabse", constraint = c("title", "abstract", "keywords"))
query("test", "test1 r, test4", "AND", "test2$", "test", provider = "embase", constraint = c("title", "abstract", "keywords"))
query("test", "test1 r, test4", "AND", "test2$", "test", provider = "wos", constraint = c("title", "abstract", "keywords"))
devtools::load_all(".")
query("test", "test1 r, test4", "AND", "test2$", "test", provider = "wos", constraint = c("title", "abstract", "keywords"))
devtools::load_all(".")
query("test", "test1 r, test4", "AND", "test2$", "test", provider = "wos", constraint = c("title", "abstract", "keywords"))
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"), provider = "wos", constraint = c("title", "abstract", "keywords"))
query("Lorem", "Ipsum, dolor", "sit", provider = "PubMed",
constraint = "Abstract", clipboard = FALSE)
query("Lorem", "Ipsum, dolor", "sit", provider = "PubMed",
constraint = c("title", "abstract"), clipboard = FALSE)
query("Lorem", "AND", "Ipsum", "NOT", "dolor", provider = "lilacs",
constraint = c("title", "abstract"), clipboard = FALSE)
query("Lorem", "AND", "Ipsum", "NOT", "dolor", provider = "embase",
constraint = c("title", "abstract"), clipboard = FALSE)
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"),
provider = "wos", constraint = c("title/abstract"))
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"),
provider = "wos", constraint = c("title", "abstract", "keyword))
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"),
provider = "wos", constraint = c("title", "abstract", "keyword"))
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"),
provider = "apa", constraint = c("title", "abstract", "keyword"))
query(keyword_set(1, "english"), "AND", keyword_set(2, "english"),
provider = "ebsco", constraint = c("title", "abstract", "keyword"))
devtools::load_all(".")
getwd()
create_package("C:/Midia/GitHub/sqlr.template")
